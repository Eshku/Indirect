/**
 * A "hot" component that manages an entity's lifecycle state using a bitmask.
 * This is central to the entity pooling pattern, allowing entities to be
 * activated, deactivated, and recycled without costly creation/destruction
 * or archetype changes.
 */
export class LifecycleState {
	static schema = {
		flags: {
			type: 'bitmask',
			of: ['ACTIVE', 'DYING', 'POOLED'],
		},
	}

	constructor({ flags = LifecycleState.FLAGS.POOLED } = {}) {
		// The static FLAGS property is auto-generated by the SchemaParser.
		this.flags = flags
	}
}

