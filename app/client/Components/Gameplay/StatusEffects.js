/**
 * Manages gameplay-related status effects for an entity, such as being stunned,
 * poisoned, or silenced. This component uses a bitmask for efficient checking
 * of multiple, non-exclusive states.
 *
 * This component is separate from `PhysicsState` because these effects originate
 * from gameplay logic (e.g., spells, attacks) rather than the physics simulation.
 * Systems like `MovementSystem` or `AbilitySystem` will read from this component
 * to determine if an entity's actions are restricted.
 */
export class StatusEffects {
	static schema = {
		flags: {
			type: 'bitmask',
			of: ['NONE', 'STUNNED', 'PARALYZED', 'ROOTED', 'SILENCED', 'POISONED', 'BLEEDING', 'BURNING'],
		},
	}

	constructor({ flags = StatusEffects.FLAGS.NONE } = {}) {
		// The static FLAGS property is auto-generated by the SchemaParser.
		this.flags = flags
	}
}
